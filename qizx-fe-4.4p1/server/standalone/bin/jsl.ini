[defines]

[service]
appname=TEST_SERVLET
servicename=TEST_SERVLET
displayname=TEST_SERVLET
servicedescription=TEST_SERVLET

;Size of internal buffer for string handling
;increase if you use very long command line parameters e.g. 
;a very long classpath
stringbuffer=16000

;Service start type
;auto demand disabled	
;default is auto
starttype=auto

;Allow interaction with desktop
;This is a service configuration flag; default is false
;interactwithdesktop=false

;Account under which service runs
;default is system
;account=mroescht-PC\mroescht

;Password for above account
;system need not provide a password
;obfuscation of password is not supported. It is actually not needed.
;The password specified here is ONLY used during the jsl -install command. 
;It can (and should) be deleted after installation.
;password=somepwd

;Allocate a console and register a console event handler 
;to catch shutdown events.
;Default is true; options are FALSE TRUE false true YES NO yes no
;This option has two effects:
;1. If active it catches the logoff events and prevents the service 
;from erroneously stopping in this case.
;2. It creates a console window if interaction with the desktop is allowed.
;Effect 1 can be achieved in Java 1.3.1 and higher by using the -Xrs option.
;Effect 2 may or may not be desired.
useconsolehandler=false

;Call <stopclass>.<stopmethod> through JNI so stop the JVM.
;The simplest way to use this functionality is to use the Systen.exit() call
;as specified below. 
;Nevertheless you can call any static method in your code.   
;The method called is expected to terminate the JVM one way or the other. 
;It can directly call System.exit() or make another Thread do it 
;to make the main method return. 
;The method can return immediately if desired. 
;If the JVM doesn't stop another attempt can be made to 
;stop the service at a later time.
stopclass=java/lang/System 
stopmethod=exit 

;Take care to specify the right signature for your method. 
;void System.exit( int code ) has 
;the signature specified below. void myMethod() has the signature ()V. 
;Please refer to the JNI documentation for details.
stopsignature=(I)V

;Redirect C level stdout and stderr to the specified files
;Please note that those are different files then the ones used below for 
;Java level stdout and stderr
;Default is no redirection
stdout=E:\src\runservlet\jetty\logs\jsl_out.log
stdoutappend=no
stderr=E:\src\runservlet\jetty\logs\jsl_err.log
stderrappend=no

[java]
;Path to the java runtime used
;If this option is not used the default from the registry will be used
;jrepath=..\..\..\jdk16

;Type of jvm to be used. Alternative mechanism to specifying 
;-client or -server on the command line.
;Can use any JVM name, which is different from the command line 
;which will only allow -client and -server
;Useful when using a JVM different from Sun's implementation.
;Jvmtype can be a comma seperated list. JSL will first find 
;a JVM installation location. THEN it will load the first 
;type of jvm in the list it can find. It will NOT search 
;in alternative JVM locations for alternative jvm types. 
;Be careful what JVM is actually installed and used before 
;you report a bug on this feature.
jvmtype=server,client

;Working directory
;If the working directory path starts with a "." 
;it will be replaced with the .ini directory path
;This is neccessary because a service does not inherit a working directory 
;from the shell. Therefore "." would be meaningless.
;This logic for "." is only required for the wrkdir because all other paths 
;will resolve a "." against the working dir once it is set.
wrkdir=E:\src\runservlet\jetty

;The java command line
cmdline=-Xrs -Xss2m -Xmx1024m -jar start.jar

